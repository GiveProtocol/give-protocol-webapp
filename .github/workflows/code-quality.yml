name: Code Quality & Analysis

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
      - 'fix/**'
  pull_request:
    branches:
      - main
      - develop
  schedule:
    # Run daily at 2 AM UTC to catch issues in dependencies
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      debug_enabled:
        type: boolean
        description: 'Enable debug mode'
        required: false
        default: false

permissions:
  contents: read
  security-events: write

env:
  NODE_VERSION: '20'

jobs:
  code-quality:
    name: Code Quality Checks
    permissions:
      contents: read
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript compiler check
        run: npm run build -- --noEmit
        continue-on-error: true

      - name: Run linting
        id: lint
        run: |
          npm run lint:report || echo "LINT_FAILED=true" >> $GITHUB_ENV
          if [ -f eslint-report.json ]; then
            echo "ESLint report generated successfully"
          fi
        continue-on-error: true

      - name: Run tests with coverage
        id: test
        run: |
          npm run test -- --ci --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text-summary
        continue-on-error: true

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            coverage/
            eslint-report.json
          retention-days: 7

      - name: SonarCloud Scan
        if: false  # Temporarily disabled
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.qualitygate.wait=true
            -Dsonar.verbose=${{ github.event.inputs.debug_enabled == 'true' && 'true' || 'false' }}

      - name: Generate summary
        if: always()
        run: |
          echo "## Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.lint.outcome }}" == "failure" ] || [ "$LINT_FAILED" == "true" ]; then
            echo "❌ Linting: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Linting: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.test.outcome }}" == "failure" ]; then
            echo "❌ Tests: Failed" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Tests: Passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View full analysis on SonarCloud](https://sonarcloud.io/summary/new_code?id=GiveProtocol_Duration-Give)" >> $GITHUB_STEP_SUMMARY

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'